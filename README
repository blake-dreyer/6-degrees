Comp15M1 Project 2 - Six Degrees of Seperation, Phase 02
Author: Blake Dreyer (bdreye02), Date: 21 April 2023

Purpose -  The purpose of this program is to read in a datafile containing names of musical artists along with songs they were a part of singing. The program then populates an unweighted graph where the artists are vertexes and songs they collaborated on together for the edges. Users than can enter multiple commands to query the data and received responses. Input commands can be entered from the command line or via file, output can be to the command line or into a file.

Files:
main.cpp - Main program that handles input/output method and interacts with the SixDegrees class
Makefile - allows the program to be compiled and linked with one command
SixDegrees.cpp - The implementation of my SixDegrees Class. Built exclusively by me and loads the data into the collabgraph as well as handles user commands about the data.
SixDegrees.h - Interface for the collabgraph class
Collabgraph.cpp - implementation of the collabgraph class whose main purpose is to build the graph of Artist objects and the edges that connect them. Some of this file was provided as starter code but I completed most functions as part of the assignment.
Collabgraph.h - Interface for the Collabgraph class
Artist.cpp - Implementation for Artist objects, provided as starter code.
Artist.cpp - Interface for Artist objects, provided as starter code.
artists.txt - sample dataset thats large enough to thoroughly test the program.
testinput.txt/testoutput.txt - txt files than can be used for input and output. testinput.txt is pre filled with a list of commands
README - You're looking at it!

Instructions:
Compile the program with "make SixDegrees"
Run the program with "./SixDegrees datafile.txt [input.txt] [output.txt]
[square brackets] represent optional inputs, if these files are not provided than the command line is used via the standard in/output streams. If you have further questions the testInput.txt file contains a series of commands in order.

Description: The collabgraph is a non weighted graph. The algorithm breadth first search (bfs) works by exploring all the immediate neighbors of a node first, then moving on to the next level of the graph and exploring all the neighbors of that node. This leaves a trail of predecesors that traces the shortest distance (amount of edges) from a given source node to a destination node. Implementing the not command did not involve changing this algorithm, I just simply built a vector of artists to exclude and marked their representtive vertex as already visited prior to running the bfs alogrithm. For depth first search (dfs), I utilized a recursive approach. This approach (repeatedly calling dfs on the first neighbor of each node as it is visited) creates a depth first apporach to traversing the graph. This means significantly longer paths are found between the source and destination artist. 

Methodology: I first implemented the necessary functions to to make CollabGraph completely functional, then built a hollow version of the SixDegrees class that didn't really interact with the graph but instead made each function simply print a debugging statement when it was called. I used this version of SixDegrees to get main functioning and test my programs ability to handle the different versions of input/output the program needed to handle. When that was complete I started populating the graph and designing and testing my algorithms one at time. 
